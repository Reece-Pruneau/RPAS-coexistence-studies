
%Main function for version 4 of co channel study
%Urban and co-channel
%PhiDistribution.m does not need to be run prior to executing this function

%***********
%to switch between free space and P1546 propagation 
%losses for terestrial UEs, 
%manualy comment/uncomment lines 
%***********



%clear all stored values that may interphere
clear all

%start run timer
tic

%for d=1:16
%   tilt=-1*(d-1)
   
%for a=1:60 




%{
%SPECTRA Low Band URBAN
fc=708e6; %center frequency (Hz)
lambda=299792458/fc; %wavelength (m)
bw=5e6; %bandwidth (Hz)
tilt=0;  %mechanical downtilt (degrees)
L_feeder=0; %(dB)
L_body=-4; %(dB)
SINR_target=18.5; %(dB)
UE_gain=-3; %(dBi)
L_entry=-14.1; %(dB)
indoor_ratio=0.7; %ratio of terestrial UEs indoors, between 0 and 1 (0 being all outdoor) 
h_BSa=44.4; %BS antenna height (m)
h_BSb=44.4;  %BS antenna height (m)
h_BSc=44.4;
h_UEb=1.5; %UE antenna height (m)
G_0=15.9; %BS antenna gain (dBi)
%d_sep=50000; % (m) seperation distance between both networks
n_a=1000; %number of monte carlo runs
offset=0; %degrees
r_a=1000; %cell radius (m)
alpha=0.8;
loading_factor=0.5;
aerial_factor=1;
%}


%{
%SPECTRA Low Band RURAL
fc=708e6; %center frequency (Hz)
lambda=299792458/fc; %wavelength (m)
bw=5e6; %bandwidth (Hz)
tilt=0;  %mechanical downtilt (degrees)
L_feeder=0; %(dB)
L_body=-4; %(dB)
SINR_target=10; %(dB)
UE_gain=-3; %(dBi)
L_entry=-14.1; %(dB)
indoor_ratio=0.5; %ratio of terestrial UEs indoors, between 0 and 1 (0 being all outdoor) 
h_BSa=76; %BS antenna height (m)
h_BSb=76;  %BS antenna height (m)
h_BSc=76;
h_UEb=1.5; %UE antenna height (m)
G_0=16.1; %BS antenna gain (dBi)
%d_sep=10000; % (m) seperation distance between both networks
n_a=1000; %number of monte carlo runs
offset=0; %degrees
r_a=2500; %cell radius (m)
alpha=1;
loading_factor=0.5;
aerial_factor=0.33;
%}

%{
%Low Band RURAL
fc=708e6; %center frequency (Hz)
lambda=299792458/fc; %wavelength (m)
bw=5e6; %bandwidth (Hz)
tilt=-3;  %mechanical downtilt (degrees)
L_feeder=-3; %(dB)
L_body=-4; %(dB)
SINR_target=10; %(dB)
UE_gain=-3; %(dBi)
L_entry=-14.1; %(dB)
indoor_ratio=0.5; %ratio of terestrial UEs indoors, between 0 and 1 (0 being all outdoor) 
h_BSa=30; %BS antenna height (m)
h_BSb=30;  %BS antenna height (m)
h_BSc=30;
h_UEb=1.5; %UE antenna height (m)
G_0=15; %BS antenna gain (dBi)
d_sep=64000; % (m) seperation distance between both networks
n_a=200; %number of monte carlo runs
offset=30; %degrees
r_a=2500; %cell radius (m)
alpha=1;
loading_factor=0.5;
aerial_factor=0.33;
%}


%Low Band URBAN
fc=708e6; %center frequency (Hz)
lambda=299792458/fc; %wavelength (m)
bw=5e6; %bandwidth (Hz)
tilt=-3;  %mechanical downtilt (degrees)
L_feeder=-3; %(dB)
L_body=-4; %(dB)
SINR_target=18.5; %(dB)
UE_gain=-3; %(dBi)
L_entry=-14.1; %(dB)
indoor_ratio=0.7; %ratio of terestrial UEs indoors, between 0 and 1 (0 being all outdoor) 
h_BSa=30; %BS antenna height (m)
h_BSb=30;  %BS antenna height (m)
h_BSc=30;
h_UEb=1.5; %UE antenna height (m)
G_0=15; %BS antenna gain (dBi)
d_sep=40000; % (m) seperation distance between both networks
n_a=100; %number of monte carlo runs
n_u=12; %number of UEs per sector
offset=0; %degrees
r_a=1000; %cell radius (m)
alpha=0.8;
loading_factor=0.5;
aerial_factor=0.33;
 
%{
%Mid Band RURAL
fc=1900e6; %center frequency (Hz)
lambda=299792458/fc; %wavelength (m)
bw=5e6; %bandwidth (Hz)
tilt=-3;  %mechanical downtilt (degrees)
L_feeder=-3; %(dB)
L_body=-4; %(dB)
SINR_target=13.2; %(dB)
UE_gain=0; %(dBi)
L_entry=-14.9; %(dB)
indoor_ratio=0.5; %ratio of terestrial UEs indoors, between 0 and 1 (0 being all outdoor) 
h_BSa=30; %BS antenna height (m)
h_BSb=30;  %BS antenna height (m)
h_BSc=30;
h_UEb=1.5; %UE antenna height (m)
G_0=18; %BS antenna gain (dBi)
d_sep=11000; % (m) seperation distance between both networks
n_a=2000; %number of monte carlo runs
offset=60; %degrees
r_a=2500; %cell radius (m)
%}

%{
%Mid Band URBAN
fc=1900e6; %center frequency (Hz)
lambda=299792458/fc; %wavelength (m)
bw=5e6; %bandwidth (Hz)
tilt=-10;  %mechanical downtilt (degrees)
L_feeder=-3; %(dB)
L_body=-4; %(dB)
SINR_target=25.3; %(dB)
UE_gain=0; %(dBi)
L_entry=-14.9; %(dB)
indoor_ratio=0.7; %ratio of terestrial UEs indoors, between 0 and 1 (0 being all outdoor) 
h_BSa=25; %BS antenna height (m)
h_BSb=25;  %BS antenna height (m)
h_BSc=25;
h_UEb=1.5; %UE antenna height (m)
G_0=16; %BS antenna gain (dBi)
d_sep=11000; % (m) seperation distance between both networks
n_a=2000; %number of monte carlo runs
offset=60; %degrees
r_a=250; %cell radius (m)
%}


bw_RB=180e3; %bandwidth of resource B L O C K S 

%number of resource blocks within channel
N_RB=floor(0.9*bw./bw_RB);


%number of resource blocks assigned to UEs
M_a=2;
M_b=N_RB./2;
M_c=2;

n_ua=floor(N_RB./M_a);
n_ub=floor(N_RB./M_b);
n_uc=floor(N_RB./M_c);

%P_max=4.6e-6; %dBm/Hz max power
max_dBmUE=23+10*log10(bw/5e6);
%max_dBmUE=36.95 - UE_gain; %max transmiting power in channel (dBm)
%according to RSS 130

min_dBmUE=-40+10*log10(bw/5e6); %min transmiting power of channel (dBm)
nf=5; %noise figure (dB)

%min received power per resource block
P_0=10*log10(bw)-173.8+10*log10(bw_RB./bw)+nf+SINR_target;

%number of allocated resource blocks
%M_pusch=10*log10(round((0.95*bw)./180e3));
Ma_dB=10*log10(M_a);
Mb_dB=10*log10(M_b);
Mc_dB=10*log10(M_c);


%coupling loss precentile
%CLp=max_dBmUE-P_0-M_pusch;

%Building entry loss ITU rec P.2109-2
%p=0.5; %probability to exceed 
%F=0; %inverse cumulative normal distribution at p=0.5
%f=fc/1e9; %center freq in GHz
%L_entry=10*log10(10.^(0.1*F*(9.6+2*log10(f))+0.212*abs(tilt)+12.64+3.72*log10(f)+0.96*log10(f).^2)+10.^(0.1*F*(4.5-2*log10(f))+9.1-3*log10(f))+10.^(-0.3));

%Thermal Noise over Victim UE bw
noisefloor=10.*log10(1.380649e-23*290*bw_RB*1000)+nf+Mb_dB;  %dBm
N_thermal=10.^(noisefloor./10); %mW


%Matrix for storing positions of hexagon corners
%so we can plot the outline later
%7 because there are 7 corner (first + last overlap)
%2 because x&y
%3 because we have tri-sectors
outline_a=NaN(7,2,19,3);
outline_b=NaN(7,2,19,3);
outline_c=NaN(7,2,19,3);

%Interfering network A
%antenna orrientations of BS
BS_aV=[0,1,0;
       0.866,-0.5,0;
       -0.866,-0.5,0];


%Matrix for storing BS positions
BS_a=NaN(3,19);

%set BS Z positions 
BS_a(3,:)=h_BSa;

%set BS X positions
BS_a(1,1:3)=-5.1962*r_a;
BS_a(1,4:7)=-2.5981*r_a;
BS_a(1,8:12)=0*r_a;
BS_a(1,13:16)=2.5981*r_a;
BS_a(1,17:19)=5.1962*r_a;

%set BS Y positions
BS_a(2,8)=0;
BS_a(2,[4,13])=-1.5*r_a;
BS_a(2,[1,9,17])=-3*r_a;
BS_a(2,[5,14])=-4.5*r_a;
BS_a(2,[2,10,18])=-6*r_a;
BS_a(2,[6,15])=-7.5*r_a;
BS_a(2,[3,11,19])=-9*r_a;
BS_a(2,[7,16])=-10.5*r_a;
BS_a(2,12)=-12*r_a;


%matrix for storing drone position in all sectors
%(xyz,sector,BS,run)
UE_a=zeros(3,3,19,n_a,n_ua);
%note, sector numbering starts from top sector and goes clockwise

%Generate n_a aerial UE positions per sector (also generates outline points
%for sector hexagonal outline

for n=1:19
    for u=1:n_ua
[UE_a(1:2,1,n,:,u),outline_a(:,:,n,1)]=randHEX(r_a,BS_a(2,n)+r_a,BS_a(1,n),n_a);
[UE_a(1:2,2,n,:,u),outline_a(:,:,n,2)]=randHEX(r_a,BS_a(2,n)-0.5*r_a,BS_a(1,n)+0.866*r_a,n_a);
[UE_a(1:2,3,n,:,u),outline_a(:,:,n,3)]=randHEX(r_a,BS_a(2,n)-0.5*r_a,BS_a(1,n)-0.866*r_a,n_a);
    end
end


%Victim Network B
%BS have same orientations for whole network 120 deg spread
BS_bV=[0,-1,0;
       0.866,0.5,0;
       -0.866,0.5,0];


%Matrix for storing BS positions
BS_b=NaN(3,19); %(xyz , BS number)

%set BS Z positions
BS_b(3,:)=h_BSb;

%set BS X positions
BS_b(1,1:3)=-5.1962*r_a;
BS_b(1,4:7)=-2.5981*r_a;
BS_b(1,8:12)=0*r_a;
BS_b(1,13:16)=2.5981*r_a;
BS_b(1,17:19)=5.1962*r_a;

%set BS Y positions
BS_b(2,8)=d_sep;
BS_b(2,[4,13])=d_sep+1.5*r_a;
BS_b(2,[1,9,17])=d_sep+3*r_a;
BS_b(2,[5,14])=d_sep+4.5*r_a;
BS_b(2,[2,10,18])=d_sep+6*r_a;
BS_b(2,[6,15])=d_sep+7.5*r_a;
BS_b(2,[3,11,19])=d_sep+9*r_a;
BS_b(2,[7,16])=d_sep+10.5*r_a;
BS_b(2,12)=d_sep+12*r_a;

%Matrix for storing terestrial UE positions
UE_b=zeros(3,3,19,n_a,n_ub);

%set height of terrestrial UEs
UE_b(3,:,:,:,:)=h_UEb;

%Generate n_a terrestrial UE positions per sector
for n=1:19
    for u=1:n_ub
[UE_b(1:2,1,n,:,u),outline_b(:,:,n,1)]=randHEX(r_a,BS_b(2,n)-r_a,BS_b(1,n),n_a);
[UE_b(1:2,2,n,:,u),outline_b(:,:,n,2)]=randHEX(r_a,BS_b(2,n)+0.5*r_a,BS_b(1,n)+0.866*r_a,n_a);
[UE_b(1:2,3,n,:,u),outline_b(:,:,n,3)]=randHEX(r_a,BS_b(2,n)+0.5*r_a,BS_b(1,n)-0.866*r_a,n_a);
    end
end



%Baseline Aggresor Network C
%BS have same orientations for whole network 120 deg spread
BS_cV=BS_aV;


%Matrix for storing BS positions
BS_c=NaN(3,19); %(xyz , BS number)

%set BS Z positions
BS_c(3,:)=h_BSb;

%set BS X positions
BS_c(1,:)=BS_a(1,:);

%set BS Y positions
BS_c(2,:)=BS_a(2,:);%-(15*r_a);

%Matrix for storing terestrial UE positions
UE_c=zeros(3,3,19,n_a,n_uc);

%set height of terrestrial UEs
UE_c(3,:,:,:,:)=h_UEb;

%Generate n_a terrestrial UE positions per sector
for n=1:19
    for u=1:n_uc
[UE_c(1:2,1,n,:,u),outline_c(:,:,n,1)]=randHEX(r_a,BS_c(2,n)+r_a,BS_c(1,n),n_a);
[UE_c(1:2,2,n,:,u),outline_c(:,:,n,2)]=randHEX(r_a,BS_c(2,n)-0.5*r_a,BS_c(1,n)+0.866*r_a,n_a);
[UE_c(1:2,3,n,:,u),outline_c(:,:,n,3)]=randHEX(r_a,BS_c(2,n)-0.5*r_a,BS_c(1,n)-0.866*r_a,n_a);
    end
end




%Rotation of network B in XY with BS_b(:,10) as axis

R=[cosd(offset),-sind(offset);
    sind(offset),cosd(offset)];

%move center of B network to origin
BS_b(2,:)=BS_b(2,:)-(d_sep);
UE_b(2,:,:,:,:)=UE_b(2,:,:,:,:)-(d_sep);
outline_b(:,2,:,:)=outline_b(:,2,:,:)-(d_sep);

%Apply rotation opperator
for s=1:3
    temp=R*squeeze(BS_bV(s,1:2))';
    BS_bV(s,1:2)=temp';
    for n=1:19
        toomp=R*squeeze(BS_b(1:2,n));
        BS_b(1:2,n)=toomp;
        for p=1:7
            broomp=R*squeeze(outline_b(p,:,n,s)');
            outline_b(p,:,n,s)=broomp';
        end
        for i=1:n_a
            for u=1:n_ub
          bowl=R*squeeze(UE_b(1:2,s,n,i,u));
          UE_b(1:2,s,n,i,u)=bowl;
            end
        end
    end
end

%move network to original position
BS_b(2,:)=BS_b(2,:)+(d_sep);
UE_b(2,:,:,:,:)=UE_b(2,:,:,:,:)+(d_sep);
outline_b(:,2,:,:)=outline_b(:,2,:,:)+(d_sep);

















%{
%Plotting hex outlines and UE positions
hold on
for n=1:19
for s=1:3
    
    
 plot(outline_c(:,1,n,s),outline_c(:,2,n,s),'g')   
 plot(outline_b(:,1,n,s),outline_b(:,2,n,s),'b')
 plot(outline_a(:,1,n,s),outline_a(:,2,n,s),'r')
 
 if s==2 && n==12
     fill(outline_b(:,1,n,s),outline_b(:,2,n,s),'r')
 end
 %{
    for i=1:n_a
      if s~=1 || n~=8
     scatter(UE_b(1,s,n,i),UE_b(2,s,n,i),[],10.*log10(I_b(1,8,s,n,i)),'filled')
      end
     scatter(UE_a(1,s,n,i),UE_a(2,s,n,i),[],10.*log10(I_a(1,8,s,n,i)),'filled')
    %plot(UE(1,i),UE(2,i),'k.')
    end
    %}
end
end
plot(squeeze(UE_c(1,2,8,:)),squeeze(UE_c(2,2,8,:)),'.')
xlabel('x position (m)')
ylabel('y position (m)')
hold off
%}


















%count number of UEs over or under tx power range
n_UEmaxC=zeros(3,19);
n_UEminC=zeros(3,19);
n_UEmaxB=zeros(3,19);
n_UEminB=zeros(3,19);
n_UEmaxA=zeros(3,19);
n_UEminA=zeros(3,19);

%WANTED SIGNAL
S_const=10.^((SINR_target+noisefloor)./10); %(mW)

Signal=zeros(3,19,n_a,n_ub); %incase power control cannot meet target SINR

%Precalculate Loss
%for d=1:300000
%P1546(d)=-P1546FieldStrMixed(fc./1000000,50,h_UEb,h_BSb,10,'Rural',d./1000,'Land',0, 'q', 50, 'Ptx', 1, 'ha', h_UEb);
%end
%Dat=load("P1546_708MHz_50%_1.5m_30m_10m_rural_1to3e5m.mat");
%P1546=Dat.P1546;

Dat=load("P452_10percent_Below22m.npy.mat");
P452=Dat.P452_10percent_Below22m;

temp=load("P528_10m_mesh_708MHz_V_10percent.mat");
L528=temp.L528;
d528=temp.d;
h528=temp.ht;

%Initialize variables
d_c=NaN(3,19,n_a,n_uc,3);
phi_c=NaN(3,19,n_a,n_uc);
theta_c=NaN(3,19,n_a,n_uc);
AntGain_c_c=NaN(3,19,n_a,n_uc);
L_c_c=NaN(3,19,n_a,n_uc);
indoor_c=NaN(3,19,n_a,n_uc);

d_b=NaN(3,19,n_a,n_ub,3);
phi_b=NaN(3,19,n_a,n_ub);
theta_b=NaN(3,19,n_a,n_ub);
AntGain_b_b=NaN(3,19,n_a,n_ub);
L_b_b=NaN(3,19,n_a,n_ub);
indoor_b=NaN(3,19,n_a,n_ub);

d_a=NaN(3,19,n_a,n_ua,3);
phi_a=NaN(3,19,n_a,n_ua);
theta_a=NaN(3,19,n_a,n_ua);
AntGain_a_a=NaN(3,19,n_a,n_ua);
L_a_a=NaN(3,19,n_a,n_ua);
indoor_a=NaN(3,19,n_a,n_ua);

I_dBmUEa=NaN(3,19,n_a,n_ua);
I_dBmUEb=NaN(3,19,n_a,n_ub);
I_dBmUEc=NaN(3,19,n_a,n_uc);

%UE_a(3,:,:,:)=h_UEb;
%Loop to calculate tx power for all UEs using power control
for i=1:n_a %iterate over each monte carlo run
for n=1:19  %iterate over each BS
for s=1:3   %iterate over each sector

    
   

    

  for u=1:n_uc
%displacement vector to own BS
d_c(s,n,i,u,:)=[UE_c(1,s,n,i,u)-BS_c(1,n),UE_c(2,s,n,i,u)-BS_c(2,n),UE_c(3,s,n,i,u)-BS_c(3,n)];

%angle between own BS max gain vector and displacement vector in xy plane
phi_c(s,n,i,u)=acosd(dot(squeeze(d_c(s,n,i,u,1:2)),BS_cV(s,1:2))./norm(BS_cV(s,1:2))./vecnorm(d_c(s,n,i,u,1:2)));

%elevation angle
theta_c(s,n,i,u)=acosd(dot([vecnorm(d_c(s,n,i,u,1:2)),d_c(s,n,i,u,3)],[norm(BS_cV(s,1:2)),BS_cV(s,3)])./norm(BS_cV(s,:))./vecnorm(d_c(s,n,i,u,:))).*d_c(s,n,i,u,3)./abs(d_c(s,n,i,u,3));

%Antenna gain to own BS
AntGain_c_c(s,n,i,u)=F1336(phi_c(s,n,i,u),theta_c(s,n,i,u),G_0,tilt);

%propagation loss to Own BS
%free space
%L_b_b(s,n,i)=20.*log10(lambda./(4.*pi.*vecnorm(d_b(s,n,i,:))));

%P1546
L_c_c(s,n,i,u)=-P452(round(vecnorm(d_c(s,n,i,u,1:2))+1),1);


if rand>indoor_ratio
indoor_c(s,n,i,u)=0;
I_dBmUEc(s,n,i,u)=min([max_dBmUE, Mc_dB + P_0 - alpha.*(AntGain_c_c(s,n,i,u)+L_c_c(s,n,i,u)+UE_gain+L_feeder+L_body) ]);
else
indoor_c(s,n,i,u)=1;
I_dBmUEc(s,n,i,u)=min([max_dBmUE, Mc_dB + P_0 - alpha.*(AntGain_c_c(s,n,i)+L_c_c(s,n,i)+UE_gain+L_feeder+L_body+L_entry) ]);
end

if I_dBmUEc(s,n,i,u)>=max_dBmUE
    I_dBmUEc(s,n,i,u)=max_dBmUE;
    n_UEmaxC(s,n)=n_UEmaxC(s,n)+1;
end
if I_dBmUEc(s,n,i,u)<=min_dBmUE
    I_dBmUEc(s,n,i,u)=min_dBmUE;
    n_UEminC(s,n)=n_UEminC(s,n)+1;
end

  end


    for u=1:n_ub



%displacement vector to own BS
d_b(s,n,i,u,:)=[UE_b(1,s,n,i,u)-BS_b(1,n),UE_b(2,s,n,i,u)-BS_b(2,n),UE_b(3,s,n,i,u)-BS_b(3,n)];

%angle between own BS max gain vector and displacement vector in xy plane
phi_b(s,n,i,u)=acosd(dot(squeeze(d_b(s,n,i,u,1:2)),BS_bV(s,1:2))./norm(BS_bV(s,1:2))./vecnorm(d_b(s,n,i,u,1:2)));

%elevation angle
theta_b(s,n,i,u)=acosd(dot([vecnorm(d_b(s,n,i,u,1:2)),d_b(s,n,i,u,3)],[norm(BS_bV(s,1:2)),BS_bV(s,3)])./norm(BS_bV(s,:))./vecnorm(d_b(s,n,i,u,:))).*d_b(s,n,i,u,3)./abs(d_b(s,n,i,u,3));

%Antenna gain to own BS
AntGain_b_b(s,n,i,u)=F1336(phi_b(s,n,i,u),theta_b(s,n,i,u),G_0,tilt);

%propagation loss to Own BS
%free space
%L_b_b(s,n,i)=20.*log10(lambda./(4.*pi.*vecnorm(d_b(s,n,i,:))));

%P1546
L_b_b(s,n,i,u)=-P452(round(vecnorm(d_b(s,n,i,u,1:2))+1),1);


if rand>indoor_ratio
indoor_b(s,n,i,u)=0;
I_dBmUEb(s,n,i,u)=min([max_dBmUE, Mb_dB + P_0 - alpha.*(AntGain_b_b(s,n,i,u)+L_b_b(s,n,i,u)+UE_gain+L_feeder+L_body) ]);

else
indoor_b(s,n,i,u)=1;
I_dBmUEb(s,n,i,u)=min([max_dBmUE, Mb_dB + P_0 - alpha.*(AntGain_b_b(s,n,i,u)+L_b_b(s,n,i,u)+UE_gain+L_feeder+L_body+L_entry) ]);

end

if I_dBmUEb(s,n,i,u)>=max_dBmUE
    I_dBmUEb(s,n,i,u)=max_dBmUE;
    n_UEmaxB(s,n)=n_UEmaxB(s,n)+1;
end
if I_dBmUEb(s,n,i,u)<=min_dBmUE
    I_dBmUEb(s,n,i,u)=min_dBmUE;
    n_UEminB(s,n)=n_UEminB(s,n)+1;
end

    end
    
    for u=1:n_ua

        
        if rand<aerial_factor
UE_a(3,s,n,i,u)=rand*300; %generate random drone altitude
indoor_a(s,n,i,u)=0;
else
UE_a(3,s,n,i,u)=h_UEb;
  if rand<indoor_ratio
    indoor_a(s,n,i,u)=1;
  else
    indoor_a(s,n,i,u)=0;
  end
end
    
        
        
        
%displacement vector to own BS
d_a(s,n,i,u,:)=[UE_a(1,s,n,i,u)-BS_a(1,n),UE_a(2,s,n,i,u)-BS_a(2,n),UE_a(3,s,n,i,u)-BS_a(3,n)];

%angle between own BS max gain vector and displacement vector in xy plane
phi_a(s,n,i,u)=acosd(dot(squeeze(d_a(s,n,i,u,1:2)),BS_aV(s,1:2))./norm(BS_aV(s,1:2))./vecnorm(d_a(s,n,i,u,1:2)));

%elevation angle
theta_a(s,n,i,u)=acosd(dot([vecnorm(d_a(s,n,i,u,1:2)),d_a(s,n,i,u,3)],[norm(BS_aV(s,1:2)),BS_aV(s,3)])./norm(BS_aV(s,:))./vecnorm(d_a(s,n,i,u,:))).*d_a(s,n,i,u,3)./abs(d_a(s,n,i,u,3));

%Antenna gain to own BS
AntGain_a_a(s,n,i,u)=F1336(phi_a(s,n,i,u),theta_a(s,n,i,u),G_0,tilt);

%propagation loss to Own BS
%free space
%L_a_a(s,n,i)=20.*log10(lambda./(4.*pi.*vecnorm(d_a(s,n,i,:))));

if UE_a(3,s,n,i,u)>22
%ITU P528
[~, Hindex] = min(abs(h528-UE_a(3,s,n,i,u)));
[~, Dindex] = min(abs(d528-vecnorm(d_a(s,n,i,u,1:2))));

    L_a_a(s,n,i,u)=-L528(Hindex,Dindex);
elseif UE_a(3,s,n,i,u)<22 && UE_a(3,s,n,i,u)>=19
    L_a_a(s,n,i,u)=-P452(round(vecnorm(d_a(s,n,i,u,1:2))+1),5);
elseif UE_a(3,s,n,i,u)<19 && UE_a(3,s,n,i,u)>=14
    L_a_a(s,n,i,u)=-P452(round(vecnorm(d_a(s,n,i,u,1:2))+1),4);
elseif UE_a(3,s,n,i,u)<14 && UE_a(3,s,n,i,u)>=9
    L_a_a(s,n,i,u)=-P452(round(vecnorm(d_a(s,n,i,u,1:2))+1),3);
elseif UE_a(3,s,n,i,u)<9 && UE_a(3,s,n,i,u)>=4
    L_a_a(s,n,i,u)=-P452(round(vecnorm(d_a(s,n,i,u,1:2))+1),2);
elseif UE_a(3,s,n,i,u)<4
    L_a_a(s,n,i,u)=-P452(round(vecnorm(d_a(s,n,i,u,1:2))+1),1);
end

if indoor_a(s,n,i,u)==0
I_dBmUEa(s,n,i,u)=min([max_dBmUE, Ma_dB + P_0 - alpha.*(AntGain_a_a(s,n,i,u)+L_a_a(s,n,i,u)+UE_gain+L_feeder) ]);
elseif indoor_a(s,n,i,u)==1
I_dBmUEa(s,n,i,u)=min([max_dBmUE, Ma_dB + P_0 - alpha.*(AntGain_a_a(s,n,i,u)+L_a_a(s,n,i,u)+UE_gain+L_feeder+L_entry) ]);
end


if I_dBmUEa(s,n,i,u)>=max_dBmUE
    I_dBmUEa(s,n,i,u)=max_dBmUE;
    n_UEmaxA(s,n)=n_UEmaxA(s,n)+1;
end
if I_dBmUEa(s,n,i,u)<=min_dBmUE
    I_dBmUEa(s,n,i,u)=min_dBmUE;
    n_UEminA(s,n)=n_UEminA(s,n)+1;
end


    end
end
end
end



% for d=1:100
 %   d_sep=d*1000 
%note there are two sets of displacement vectors and angles
%UPPER CASE is wrt to reference cell BS 
%lower case is wrt to own BS (calculated above already)
D_c=NaN(3,19,3,19,n_a,n_uc,3);
PHI_c=NaN(3,19,3,19,n_a,n_uc);
THETA_c=NaN(3,19,3,19,n_a,n_uc);
AntGain_c_r=NaN(3,19,3,19,n_a,n_uc);
L_c_r=NaN(3,19,3,19,n_a,n_uc);

D_b=NaN(3,19,3,19,n_a,n_ub,3);
PHI_b=NaN(3,19,3,19,n_a,n_ub);
THETA_b=NaN(3,19,3,19,n_a,n_ub);
AntGain_b_r=NaN(3,19,3,19,n_a,n_ub);
L_b_r=NaN(3,19,3,19,n_a,n_ub);

D_a=NaN(3,19,3,19,n_a,n_ua,3);
PHI_a=NaN(3,19,3,19,n_a,n_ua);
THETA_a=NaN(3,19,3,19,n_a,n_ua);
AntGain_a_r=NaN(3,19,3,19,n_a,n_ua);
L_a_r=NaN(3,19,3,19,n_a,n_ua);


I_c=zeros(3,19,3,19,n_a,n_uc); %Baseline interference from tertrial network
I_b=zeros(3,19,3,19,n_a,n_ub); %self interference from tertrial network
I_a=zeros(3,19,3,19,n_a,n_ua); %Interference from aerial network

LoadingIndex=rand(3,19,3,n_a); %Predetermine which BSs will be ON/OFF by assigning ech a rand value 
%dimensions: (Network abc , Cell , Sector, Run)


for N=1:19   %Change reference BS
for S=1:3    %Change reference sector
 %N=8;
 %S=1;

for n=1:19  %iterate over each BS in both networks
for s=1:3   %iterate over each sector
for i=1:n_a
    
    
if LoadingIndex(3,n,s,i)>0.5
        I_c(S,N,s,n,i,:)=0;
else
        for u=1:n_uc    

%displacement vector to reference BS
D_c(S,N,s,n,i,u,:)=[UE_c(1,s,n,i,u)-BS_b(1,N),UE_c(2,s,n,i,u)-BS_b(2,N),UE_c(3,s,n,i,u)-BS_b(3,N)];

%angle between ref BS max gain vector and displacement vector in xy plane
PHI_c(S,N,s,n,i,u)=acosd(dot(squeeze(D_c(S,N,s,n,i,u,1:2)),BS_bV(S,1:2))./norm(BS_bV(S,1:2))./vecnorm(D_c(S,N,s,n,i,u,1:2)));

%elevation angle
THETA_c(S,N,s,n,i,u)=acosd(dot([vecnorm(D_c(S,N,s,n,i,u,1:2)),D_c(S,N,s,n,i,u,3)],[norm(BS_bV(S,1:2)),BS_bV(S,3)])./norm(BS_bV(S,:))./vecnorm(D_c(S,N,s,n,i,u,:))).*D_c(S,N,s,n,i,u,3)./abs(D_c(S,N,s,n,i,u,3));

%Antenna gain to ref BS
AntGain_c_r(S,N,s,n,i,u)=F1336(PHI_c(S,N,s,n,i,u),THETA_c(S,N,s,n,i,u),G_0,tilt);

%propagation loss to ref BS
%free space
%L_b_r(S,N,s,n,i)=20.*log10(lambda./(4.*pi.*vecnorm(D_b(S,N,s,n,i,:))));

%P1546
L_c_r(S,N,s,n,i,u)=-P452(round(vecnorm(D_c(S,N,s,n,i,u,1:2))),1);



if indoor_c(s,n,i,u)==0
I_c(S,N,s,n,i,u)=10.^((I_dBmUEc(s,n,i,u)+AntGain_c_r(S,N,s,n,i,u)+L_c_r(S,N,s,n,i,u)+UE_gain+L_body+L_feeder)./10); %mW
elseif indoor_c(s,n,i,u)==1
I_c(S,N,s,n,i,u)=10.^((I_dBmUEc(s,n,i,u)+AntGain_c_r(S,N,s,n,i,u)+L_c_r(S,N,s,n,i,u)+UE_gain+L_body+L_feeder+L_entry)./10); %mW
end

  
        end
end


%Calculate self interference
if LoadingIndex(2,n,s,i)>0.5 && ~(n==N && s==S)
            I_b(S,N,s,n,i,:)=0;
else
    for u=1:n_ub
%displacement vector to reference BS
D_b(S,N,s,n,i,u,:)=[UE_b(1,s,n,i,u)-BS_b(1,N),UE_b(2,s,n,i,u)-BS_b(2,N),UE_b(3,s,n,i,u)-BS_b(3,N)];

%angle between ref BS max gain vector and displacement vector in xy plane
PHI_b(S,N,s,n,i,u)=acosd(dot(squeeze(D_b(S,N,s,n,i,u,1:2)),BS_bV(S,1:2))./norm(BS_bV(S,1:2))./vecnorm(D_b(S,N,s,n,i,u,1:2)));

%elevation angle
THETA_b(S,N,s,n,i,u)=acosd(dot([vecnorm(D_b(S,N,s,n,i,u,1:2)),D_b(S,N,s,n,i,u,3)],[norm(BS_bV(S,1:2)),BS_bV(S,3)])./norm(BS_bV(S,:))./vecnorm(D_b(S,N,s,n,i,u,:))).*D_b(S,N,s,n,i,u,3)./abs(D_b(S,N,s,n,i,u,3));

%Antenna gain to ref BS
AntGain_b_r(S,N,s,n,i,u)=F1336(PHI_b(S,N,s,n,i,u),THETA_b(S,N,s,n,i,u),G_0,tilt);

%propagation loss to ref BS
%free space
%L_b_r(S,N,s,n,i)=20.*log10(lambda./(4.*pi.*vecnorm(D_b(S,N,s,n,i,:))));

%P1546
L_b_r(S,N,s,n,i,u)=-P452(round(vecnorm(D_b(S,N,s,n,i,u,1:2))+1),1);



if indoor_b(s,n,i,u)==0
    I_b(S,N,s,n,i,u)=10.^((I_dBmUEb(s,n,i,u)+AntGain_b_r(S,N,s,n,i,u)+L_b_r(S,N,s,n,i,u)+UE_gain+L_body+L_feeder)./10); %mW
elseif indoor_b(s,n,i,u)==1
    I_b(S,N,s,n,i,u)=10.^((I_dBmUEb(s,n,i,u)+AntGain_b_r(S,N,s,n,i,u)+L_b_r(S,N,s,n,i,u)+UE_gain+L_body+L_feeder+L_entry)./10); %mW
end

if s==S && n==N %don't count self interference from the reference sectors own UE
    Signal(S,N,i,u)=I_b(S,N,s,n,i,u);
    I_b(S,N,s,n,i,u)=0;

end %end if statment since all sectors in A interfere to each reference sector
  


    end
end

%Calculate Interference
if LoadingIndex(1,n,s,i)>0.5
            I_a(S,N,s,n,i,:)=0;
else

    for u=1:n_ua
    
%displacement vector to ref BS
D_a(S,N,s,n,i,u,:)=[UE_a(1,s,n,i,u)-BS_b(1,N),UE_a(2,s,n,i,u)-BS_b(2,N),UE_a(3,s,n,i,u)-BS_b(3,N)];

%angle between ref BS max gain vector and displacement vector in xy plane
PHI_a(S,N,s,n,i,u)=acosd(dot(squeeze(D_a(S,N,s,n,i,u,1:2)),BS_bV(S,1:2))./norm(BS_bV(S,1:2))./vecnorm(D_a(S,N,s,n,i,u,1:2)));

%elevation angle
THETA_a(S,N,s,n,i,u)=acosd(dot([vecnorm(D_a(S,N,s,n,i,u,1:2)),D_a(S,N,s,n,i,u,3)],[norm(BS_bV(S,1:2)),BS_bV(S,3)])./norm(BS_bV(S,:))./vecnorm(D_a(S,N,s,n,i,u,:))).*D_a(S,N,s,n,i,u,3)./abs(D_a(S,N,s,n,i,u,3));

%Antenna gain to ref BS
AntGain_a_r(S,N,s,n,i,u)=F1336(PHI_a(S,N,s,n,i,u),THETA_a(S,N,s,n,i,u),G_0,tilt);

%propagation loss to ref BS
%free space
%L_a_r(S,N,s,n,i)=20.*log10(lambda./(4.*pi.*vecnorm(D_a(S,N,s,n,i,:))));

if UE_a(3,s,n,i,u)>22
%ITU P528
    [~, Hindex] = min(abs(h528-UE_a(3,s,n,i,u)));
    [~, Dindex] = min(abs(d528-vecnorm(D_a(S,N,s,n,i,u,1:2))));

    L_a_r(S,N,s,n,i,u)=-L528(Hindex,Dindex);

%ITU P452
elseif UE_a(3,s,n,i,u)<22 && UE_a(3,s,n,i,u)>=19
    L_a_r(S,N,s,n,i,u)=-P452(round(vecnorm(D_a(S,N,s,n,i,u,1:2))+1),5);
elseif UE_a(3,s,n,i,u)<19 && UE_a(3,s,n,i,u)>=14
    L_a_r(S,N,s,n,i,u)=-P452(round(vecnorm(D_a(S,N,s,n,i,u,1:2))+1),4);
elseif UE_a(3,s,n,i,u)<14 && UE_a(3,s,n,i,u)>=9
    L_a_r(S,N,s,n,i,u)=-P452(round(vecnorm(D_a(S,N,s,n,i,u,1:2))+1),3);
elseif UE_a(3,s,n,i,u)<9 && UE_a(3,s,n,i,u)>=4
    L_a_r(S,N,s,n,i,u)=-P452(round(vecnorm(D_a(S,N,s,n,i,u,1:2))+1),2);
elseif UE_a(3,s,n,i,u)<4
    L_a_r(S,N,s,n,i,u)=-P452(round(vecnorm(D_a(S,N,s,n,i,u,1:2))+1),1);
end

if indoor_a(s,n,i,u)==0
    I_a(S,N,s,n,i,u)=10.^((I_dBmUEa(s,n,i,u)+AntGain_a_r(S,N,s,n,i,u)+L_a_r(S,N,s,n,i,u)+UE_gain+L_feeder)./10); %mW
else
    I_a(S,N,s,n,i,u)=10.^((I_dBmUEa(s,n,i,u)+AntGain_a_r(S,N,s,n,i,u)+L_a_r(S,N,s,n,i,u)+UE_gain+L_feeder+L_entry)./10); %mW
end


    end

end
end

end
end

end
end





%Aggregate all interference (sum along n,s)
I_t=squeeze(sum(sum(I_c,3),4));
I_0=squeeze(sum(sum(I_b,3),4));
I=squeeze(sum(sum(I_a,3),4));

I=squeeze(sum(reshape(I,3,19,n_a,(n_ua/n_ub),n_ub),4));
I_t=squeeze(sum(reshape(I_t,3,19,n_a,(n_uc/n_ub),n_ub),4));


%I over Thermal
IoT_map=squeeze(mean(10*log10((I+N_thermal)./N_thermal),3));

%I over N
IoN=10*log10(I./N_thermal);

IoN_map=squeeze(mean(IoN,3));

%baseline I over N 
IoN_0=10*log10(I_0./N_thermal);

IoN_0_map=squeeze(mean(IoN_0,3));

%Baseline SINR
SINR_0=Signal./(N_thermal+I_0);

%SINR with drone interference
SINR=Signal./(N_thermal+I_0+I);
SINR_t=Signal./(N_thermal+I_0+I_t);

%throughput (b/s)
throughput_0 = 0.4.*bw.*log2(1+SINR_0);
throughput = 0.4.*bw.*log2(1+SINR);
throughput_t = 0.4.*bw.*log2(1+SINR_t);

%throughput threshold
throughput_max=0.4.*bw.*log2(1+10^2.2);
throughput_min=0.4.*bw.*log2(1+10^-1);

idx=throughput>throughput_max;
throughput(idx)=throughput_max;

idx=throughput<throughput_min;
throughput(idx)=0;

idx=throughput_t>throughput_max;
throughput_t(idx)=throughput_max;

idx=throughput_t<throughput_min;
throughput_t(idx)=0;

idx=throughput_0>throughput_max;
throughput_0(idx)=throughput_max;

idx=throughput_0<throughput_min;
throughput_0(idx)=0;

%bitrate(d,:)=throughput(1,8,:);
%bitrate_0(d,:)=throughput_0(1,8,:);
%bitrate_t(d,:)=throughput_t(1,8,:);

%throughput loss (%)
bitloss=100.*(log2(1+SINR_0)-log2(1+SINR))./(log2(1+SINR_0));

%loss_scatter(d,:)=bitloss(1,8,:);
%average over all n_a (gives value for each sector in B network)
throughput_loss_map=squeeze(mean(bitloss,3));

%average over whole network (sectors & BS)
mean_throughput_loss=squeeze(mean(mean(throughput_loss_map,1),2));

%throughput loss from terestrial (%)
bitloss_t=100.*(log2(1+SINR_0)-log2(1+SINR_t))./(log2(1+SINR_0));

%average over all n_a (gives value for each sector in B network)
throughput_loss_map_t=squeeze(mean(bitloss_t,3));

%average over whole network (sectors & BS)
mean_throughput_loss_t=squeeze(mean(mean(throughput_loss_map_t,1),2));




%[CDF_IoN_P,CDF_IoN_V]=homemade_ecdf(reshape(IoN,[1,57*n_a]));
%[CDF_IoN_0_P,CDF_IoN_0_V]=homemade_ecdf(reshape(IoN_0,[1,57*n_a]));
%[CDF_SINR_P,CDF_SINR_V]=homemade_ecdf(reshape(SINR,[1,57*n_a]));
%[CDF_SINR_0_P,CDF_SINR_0_V]=homemade_ecdf(reshape(SINR_0,[1,57*n_a]));
%[CDF_throughput_P,CDF_throughput_V]=homemade_ecdf(reshape(throughput,[1,57*n_a]));
%[CDF_throughput_0_P,CDF_throughput_0_V]=homemade_ecdf(reshape(throughput_0,[1,57*n_a]));
%[CDF_loss_sys_P,CDF_loss_sys_V]=homemade_ecdf(reshape(bitloss,[1,57*n_a]));

[CDF_IoN_ref_P, CDF_IoN_ref_V]=homemade_ecdf(reshape(IoN(1,8,:),[1,n_a*n_ub]));
[CDF_loss_ref_P, CDF_loss_ref_V]=homemade_ecdf(reshape(bitloss(1,8,:),[1,n_a*n_ub]));

loss_ref_50th=throughput_loss_map(1,8);
IoN_ref_50th=IoN_map(1,8);

loss_ref_95th=CDF_loss_ref_V(round(0.95*(n_a*n_ub+1)));
IoN_ref_95th=CDF_IoN_ref_V(round(0.95*(n_a*n_ub+1)));

[CDF_loss_ref_P_t, CDF_loss_ref_V_t]=homemade_ecdf(reshape(bitloss_t(1,8,:),[1,n_a*n_ub]));
loss_ref_50th_t=throughput_loss_map_t(1,8);
loss_ref_95th_t=CDF_loss_ref_V_t(round(0.95*(n_a*n_ub+1)));



%plot(loss_ref_95th)
%grid on
%drawnow
%end
 

%loss_sys_95th=CDF_loss_sys_V(round(0.95*(n_a+1)));
%{

%Plotting hex outlines and UE positions
cmap=parula;
hexValues=log10(throughput_loss_map);
%hexValues=hexValues-min(hexValues);
hexColor=round((size(cmap,1)-1).*(hexValues-min(min(hexValues)))./(max(max(hexValues))-min(min(hexValues)))+1);

hold on
for n=1:19
for s=1:3
    
    
 plot(outline_c(:,1,n,s),outline_c(:,2,n,s),'g')   
 fill(outline_b(:,1,n,s),outline_b(:,2,n,s),cmap(hexColor(s,n),:))
 plot(outline_a(:,1,n,s),outline_a(:,2,n,s),'r')
 
 text(mean(outline_b(:,1,n,s)), mean(outline_b(:,2,n,s)) , num2str(throughput_loss_map(s,n)), 'HorizontalAlignment', 'center','VerticalAlignment', 'middle', 'FontWeight', 'bold');

 %{
    for i=1:n_a
      if s~=1 || n~=8
     scatter(UE_b(1,s,n,i),UE_b(2,s,n,i),[],10.*log10(I_b(1,8,s,n,i)),'filled')
      end
     scatter(UE_a(1,s,n,i),UE_a(2,s,n,i),[],10.*log10(I_a(1,8,s,n,i)),'filled')
    %plot(UE(1,i),UE(2,i),'k.')
    end
    %}
end
end
%plot(squeeze(UE_b(1,2,8,:)),squeeze(UE_b(2,2,8,:)))
xlabel('x position (m)')
ylabel('y position (m)')
hold off

%{
%Plotting hex outlines and UE positions
hold on
for n=1:19
for s=1:3
 plot(outline(:,2,n,s),outline(:,1,n,s),'b')
 plot(outline(:,2,n,s+3),outline(:,1,n,s+3),'r')
 
    for i=1:n_a
      if s~=1 || n~=8
     scatter(UE_b(1,s,n,i),UE_b(2,s,n,i),[],10.*log10(I_b(1,8,s,n,i)),'filled')
      end
     scatter(UE_a(1,s,n,i),UE_a(2,s,n,i),[],10.*log10(I_a(1,8,s,n,i)),'filled')
    %plot(UE(1,i),UE(2,i),'k.')
    end
    
end
end
xlabel('x position (m)')
ylabel('y position (m)')

hold off
%}
%plot(n_runs(3:n_a),average_loss(3:n_a)-average_loss(2:(n_a-1)))
%xlabel("Number of Runs n_a")
%ylabel("Throughput Loss change per run (%)")

%plot(d_s,mean_throughput_loss)
%xlabel("Seperation Distance (m)")
%ylabel("Network Throughput Loss (%)")
%}
toc
